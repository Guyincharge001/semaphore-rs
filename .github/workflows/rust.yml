use semaphore::{get_supported_depths, hash_to_field, Field, identity::Identity,
                poseidon_tree::LazyPoseidonTree, protocol::*};
use num_bigint::BigInt;

// generate identity
let mut secret = *b"secret";
let id = Identity::from_secret(&mut secret, None);

// Get the first available tree depth. This is controlled by the crate features.
let depth = get_supported_depths()[0];

// generate merkle tree
let leaf = Field::from(0);
let mut tree = LazyPoseidonTree::new(depth, leaf).derived();
tree = tree.update(0, &id.commitment());

let merkle_proof = tree.proof(0);
let root = tree.root();

// change signal and external_nullifier here
let signal_hash = hash_to_field(b"xxx");
let external_nullifier_hash = hash_to_field(b"appId");

let nullifier_hash = generate_nullifier_hash(&id, external_nullifier_hash);

let proof = generate_proof(&id, &merkle_proof, external_nullifier_hash, signal_hash).unwrap();
let success = verify_proof(root, nullifier_hash, signal_hash, external_nullifier_hash, &proof, depth).unwrap();

assert!(success);name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
